from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)
from dotenv import load_dotenv
import os
import requests
from datetime import datetime, timedelta
import locale

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OWNER_CHAT_ID = int(os.getenv("OWNER_CHAT_ID"))

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    MAIN_MENU,
    SELECT_BREAD,
    SELECT_QUANTITY,
    CONFIRM_ORDER,
    GET_ADDRESS,
    GET_PHONE,
    PAYMENT_METHOD
) = range(7)

# –î–∞–Ω–Ω—ã–µ –æ —Ö–ª–µ–±–µ
BREADS = {
    "–±–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π": 6,
    "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π": 4,
    "–¥–∞—Ä–Ω–∏—Ü–∫–∏–π": 5
}

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup([
    ["–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ü•Ø", "–ú–µ–Ω—é üìã", "–ü–æ–º–æ—â—å ‚ùì"]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
quantity_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton(str(i), callback_data=str(i)) for i in range(1, 4)]
])

def validate_address(address: str) -> bool:
    url = "https://nominatim.openstreetmap.org/search"
    params = {"q": address, "format": "json", "addressdetails": 1, "limit": 1}
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if not data:
            return False
        city = data[0].get("address", {}).get("city", "").lower()
        return city in ["valencia", "val√®ncia"]
    except Exception as e:
        print(f"Error validating address: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ö–ª–µ–±–Ω—É—é –ª–∞–≤–∫—É! ü•Ø", reply_markup=main_keyboard)
    return MAIN_MENU

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu_text = "–ú–µ–Ω—é:\n" + "\n".join([f"¬∑ {name.capitalize()}: {price}‚Ç¨ (750–≥—Ä)" for name, price in BREADS.items()])
    await update.message.reply_text(menu_text, reply_markup=main_keyboard)
    return MAIN_MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å:\n1. –ù–∞–∂–º–∏—Ç–µ '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'\n2. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–ª–µ–± –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n4. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n–ú–∏–Ω–∏–º—É–º 3 –±–∞—Ç–æ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏",
        reply_markup=main_keyboard
    )
    return MAIN_MENU

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cart'] = {}
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(name.capitalize(), callback_data=name)] for name in BREADS])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–ª–µ–±:", reply_markup=keyboard)
    return SELECT_BREAD

async def select_bread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['current_bread'] = query.data
    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {query.data.capitalize()} (max 3):", reply_markup=quantity_keyboard)
    return SELECT_QUANTITY

async def select_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    quantity = int(query.data)
    bread = context.user_data['current_bread']
    cart = context.user_data['cart']
    cart[bread] = cart.get(bread, 0) + quantity
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more"),
         InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")]
    ])
    await query.edit_message_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {bread.capitalize()} √ó {quantity}\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=keyboard
    )
    return CONFIRM_ORDER

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "add_more":
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(name.capitalize(), callback_data=name)] for name in BREADS])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–ª–µ–±:", reply_markup=keyboard)
        return SELECT_BREAD

    total = sum(context.user_data['cart'].values())
    context.user_data['total'] = total

    if total >= 3:
        keyboard = ReplyKeyboardMarkup([
            ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üìç"],
            ["–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º"]
        ], resize_keyboard=True, one_time_keyboard=True)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞:", reply_markup=keyboard)
        return GET_ADDRESS
    else:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return GET_PHONE

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = update.message.text.strip()
    if not validate_address(address):
        await update.message.reply_text("‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞ –í–∞–ª–µ–Ω—Å–∏—è.")
        return GET_ADDRESS
    context.user_data['address'] = address
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return GET_PHONE

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    url = "https://nominatim.openstreetmap.org/reverse"
    params = {"lat": location.latitude, "lon": location.longitude, "format": "json", "addressdetails": 1}
    try:
        response = requests.get(url, params=params)
        data = response.json()
        city = data.get("address", {}).get("city", "").lower()
        if city in ["valencia", "val√®ncia"]:
            context.user_data['address'] = data.get("display_name")
            await update.message.reply_text(f"‚úÖ –ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {data['display_name']}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
            return GET_PHONE
        else:
            await update.message.reply_text("‚ùå –í–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –Ω–µ –≤ –í–∞–ª–µ–Ω—Å–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.")
            return GET_ADDRESS
    except Exception as e:
        print(f"Error handling location: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.")
        return GET_ADDRESS

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    keyboard = ReplyKeyboardMarkup([
        ["–ù–∞–ª–∏—á–Ω—ã–µ", "–ö–∞—Ä—Ç–∞"]
    ], resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
    return PAYMENT_METHOD

async def payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['payment'] = update.message.text
    cart = context.user_data['cart']
    total = sum(BREADS[bread] * qty for bread, qty in cart.items())

    try:
        locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    except locale.Error:
        try:
            locale.setlocale(locale.LC_TIME, 'Russian_Russia')
        except:
            locale.setlocale(locale.LC_TIME, '')

    prep_time = 36 if '–±–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π' in cart else 24
    ready_time = datetime.now() + timedelta(hours=prep_time)

    def round_to_delivery_window(dt):
        start_hour, end_hour = 11, 20
        delivery_start = dt.replace(hour=start_hour, minute=0, second=0, microsecond=0)
        delivery_end = dt.replace(hour=end_hour, minute=0, second=0, microsecond=0)
        if dt < delivery_start:
            return delivery_start
        elif dt > delivery_end:
            return (dt + timedelta(days=1)).replace(hour=start_hour)
        return dt

    pickup_time = round_to_delivery_window(ready_time)
    pickup_text = pickup_time.strftime("–∫ %H:%M %A, %d %B %Y –≥–æ–¥–∞").capitalize()

    await update.message.reply_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n–°—É–º–º–∞: {total}‚Ç¨\n–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {pickup_text}\n–î–µ—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ü–µ–∫–∞—Ä—é",
        reply_markup=main_keyboard
    )

    admin_message = (
        f"üî• –ù–û–í–´–ô –ó–ê–ö–ê–ó üî•\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.effective_user.username}\n"
        f"------------------------------\n" +
        "\n".join([f"{name.capitalize()}: {qty} —à—Ç." for name, qty in cart.items()]) +
        f"\n–°—É–º–º–∞: {total}‚Ç¨\n"
        f"------------------------------\n"
        f"–û–ø–ª–∞—Ç–∞: {context.user_data['payment']}\n"
        f"–ê–¥—Ä–µ—Å: {context.user_data.get('address', 'Valencia 46019 Carrer de Dom√®nec G√≥mez 9')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {pickup_text}"
    )
    await context.bot.send_message(OWNER_CHAT_ID, admin_message)
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=main_keyboard)
    return MAIN_MENU

if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex("^–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"), start_order),
                MessageHandler(filters.Regex("^–ú–µ–Ω—é"), show_menu),
                MessageHandler(filters.Regex("^–ü–æ–º–æ—â—å"), help_command)
            ],
            SELECT_BREAD: [CallbackQueryHandler(select_bread)],
            SELECT_QUANTITY: [CallbackQueryHandler(select_quantity)],
            CONFIRM_ORDER: [CallbackQueryHandler(confirm_order)],
            GET_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_address),
                MessageHandler(filters.LOCATION, handle_location)
            ],
            GET_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PAYMENT_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment_method)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.run_polling()
